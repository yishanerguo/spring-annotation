spring容器的refresh()[创建刷新];
1.prepareRefresh();刷新前的预处理
     1.	initPropertySources();初始化一些属性设置;子类自定义个性化的属性设置方法
     2. getEnvironment().validateRequiredProperties();校验属性的合法
     3.this.earlyApplicationEvents = new LinkedHashSet<>();保存容器中的一些早期的事件
2.obtainFreshBeanFactory();获取BeanFactory
    1.refreshBeanFactory();刷新BeanFactory
        创建一个this.beanFactory = new DefaultListableBeanFactory();
        设置序列化id
    2.getBeanFactory()；返回刚才GenericApplicationContext
    3.将创建的beanFactoryf[DefaultListableBeanFactory]返回
3.prepareBeanFactory(beanFactory);beanfactory的预备工作(beanfactory进行一些设置)
    1.设置beanfactory的类加载器,支持表达式解析器
    2.添加部分BeanPostProcesoor[ApplicationContextAwareProcessor]
    3.设置忽略的自动转配的接口EnvironmentAware,EmbeddedValueResolverAware
    4.注册可以解析的自动装配BeanFactory,ResourceLoader,ApplicationEventPublisher,ApplicationContext,ApplicationListenerDetector
    5.添加beanPostProcesoor[ApplicationListenerDetector]
    6.添加编译时apspectj支持
    7.给beanfactory注册的组件:environment,systemProperties,systemEnvironment
4.postProcessBeanFactory(beanFactory);beanfactory准备工作完成后进行后置处理工作
    1.子类通过重写这个方法来在beanfactory创建并预准备完成以后做进一步的设置
========================================以上是beanfactory的创建及预准备工作=================================================================================
5.invokeBeanFactoryPostProcessors(beanFactory);执行BenFactoryPostProcessor;
   BeanFactoryPostProcessor:beanFactory的后置处理器,在beanfactory标准初始化之后执行(上面的这四部)的;
   两个接口:BeanFactoryPostProcessor,BeanDefinitionRegistryPostProcessor
   1.执行invokeBeanFactoryPostProcessor方法:
       先执行BeanDefinitionRegistryProcessor
        1.获取所有的BeanDefinitionRegistryPostProcessor
        2.先执行实现了PriorityOrdered优先级接口的BeanDefinitionRegistryPostProcessor
          postProcesoor.postProcessBeandefinitionRegistry(registry)
        3.再执行实现了Ordered顺序接口的BeanDefinitionRegistryPostProcessor
          postProcesoor.postProcessBeandefinitionRegistry(registry)
        4.最后执行没有实现任何优先级或顺序接口的BeanDefinitionRegistryPostProcessor
          postProcesoor.postProcessBeandefinitionRegistry(registry)

       再执行BeanFactoryPostProcessor的方法
        1.获取所有的BeanFactoryPostProcessor
        2.先执行实现了PriorityOrdered优先级接口的BeanFactoryPostProcessor
          postProcesoor.postProcessBeanFactory(registry)
        3.再执行实现了Ordered顺序接口的BeanFactoryPostProcessor
          postProcesoor.postProcessBeanFactory(registry)
        4.最后执行没有实现任何优先级或顺序接口的BeanFactoryPostProcessor
          postProcesoor.postProcessBeanFactory(registry)

6.registerBeanPostProcessors(beanFactory);注册BeanPostProcessor(Bean的后置处理器),拦截bean的创建过程
  不同接口类型的BeanPostProcessor,在bean创建前后的执行时机是不一样的
   DestructionAwareBeanPostProcessor,
   InstantiationAwareBeanPostProcessor,
   SmartInstantiationAwareBeanPostProcessor
   MergedBeanDefinitionPostProcessor:记录在internalPostProcessors

   1.获取所欲BeanPostProcessor,后置处理器都默认可以通过PriorityOrdered,Ordered接口执行优先级
   2.先注册PriorityOrdered优先级接口的BeanPostProcessor
     把每一个BeanPostProcessor,添加到BeanFactory中
     beanFactory.addBeanPostProcessor(postProcessor);
   3.再注册Ordered接口的
   4.最后注册没有实现任何优先级接口的
   5.最终注册MergedBeanDefinitionPostProcessor
   6.注册一个ApplicationListenerDetector:来在bean创建完成后检查是否ApplicationListener,如果是
     applicationContext.addApplicationListener((ApplicationListener<?>) bean);


7.initMessageSource();初始化MessageSource组件(做国际化功能:消息绑定,消息解析)
   1.获取beanfactory
   2.看容器中是否有id为messageSource的组件,类型是MessageSource的组件
     如果有就赋值给messageSource属性,如果没有自己创建一个DelegatingMessageSource
     MessageSource:去除国际化配置文件中的某个key的值:能按照区域信息获取
   3.把创建好的MessageSource注册在容器中,以后获取国际化配置文件中的值的时候,可以自动注入MessageSource
     beanFactory.registerSingleton(MESSAGE_SOURCE_BEAN_NAME, this.messageSource);

8.initApplicationEventMulticaster();初始化事件派发器
   1.获取beanFactory
   2.从BeanFactory中获取applicationEventMulticaster
   3.如果上一步没有配置,创建一个SimpleApplicationEventMulticaster
   4.将创建的applicationEventMulticaster添加到BeanFactory中,以后其他组件直接自动注入即可

9.	onRefresh();留给子容器(子类)
    1.子类重写这个方法,在容器刷新的时候可以自定义逻辑

10.registerListeners();给容器中将项目所有的ApplicationListener注册进来
    1.从容器中拿到所有ApplicationListener
    2.将每个监听器天剑到派发器中:getApplicationEventMulticaster().addApplicationListenerBean(listenerBeanName);
    3.派发之前步骤产生的事件earlyApplicationEvents

11.finishBeanFactoryInitialization(beanFactory);初始化所有剩下的单实例bean
    1.beanFactory.preInstantiateSingletons();初始化所有剩下的单实例bean
        1.获取容器中所有的bean,依次进行初始化和创建对象
        2.拿到bean的定义信息:RootBeanDefinition
        3.bean不是抽象的,是单实例,不是懒加载的
             1.判断是否是factorybean:是否是事项facorybean接口的bean
             2.不是工厂bean,利用getBean(beanName);创建对象
                 0. getBean(beanName):ioc.getBean();
                 1.doGetBean(name, null, null, false);
                 2.先获取缓存中保存的单实例bean,如果获取到说明这个bean已经被创建过(所有创建过的单实例bean都会被缓存)
                 	private final Map<String, Object> singletonObjects = new ConcurrentHashMap<>(256);
                 3.缓存中获取不到,开始Bean的创建对象流程
                 4.标记当前bean已经被创建(防止多线程)
                 5.获取bean的定义信息
                 6.获取当前bean依赖的其他bean(tDependsOn),如果有按照getBean()把依赖的Bean先创建出来:
                 7.启动单实例bean的创建流程:
                     1.createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args)
                     2.Object bean = resolveBeforeInstantiation(beanName, mbdToUse);让BeanPostProcessor拦截
                       InstantiationAwareBeanPostProcessor:提前执行
                       先触发:postProcessBeforeInstantiation();
                       如果有返回值:在触发postProcessAfterInitialization();
                     3.如果前面的InstantiationAwareBeanPostProcessor没有返回代理对象:
                     4.Object beanInstance = doCreateBean(beanName, mbdToUse, args);创建bean
                          1.创建实例beancreateBeanInstance(beanName, mbd, args);
                            利用工厂方法或者对象的构造器创建实例
                          2.applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);
                            调用MergedBeanDefinitionPostProcessor
                               postProcessMergedBeanDefinition();
                          3.populateBean(beanName, mbd, instanceWrapper);为bean属性赋值
                            赋值之前:
                              1.拿到InstantiationAwareBeanPostProcessor后置处理器;
                                postProcessAfterInstantiation();
                              2.拿到InstantiationAwareBeanPostProcessor后置处理器:
                                postProcessProperties();
                                =========赋值之前:=========
                              3.应用bean属性的值:为属性利用setter方法等进行赋值
                                applyPropertyValues(beanName, mbd, bw, pvs);
                           4.[bean初始化]initializeBean(beanName, exposedObject, mbd)
                              1.[执行Aware接口]invokeAwareMethods(beanName, bean);执行xxxAware接口的方法
                                BeanNameAware\BeanClassLoaderAware\BeanFactoryAware
                              2.[执行后置处理器之前的方法]applyBeanPostProcessorsBeforeInitialization(Object existingBean, String beanName)
                                applyBeanPostProcessorsBeforeInitialization();
                              3.[执行初始化方法]invokeInitMethods(beanName, wrappedBean, mbd);
                                1.是否是InitializingBean接口实现:执行接口规定的初始化
                                2.是否自定义初始化方法
                              4.[执行后置处理器初始化之后的方法]applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);
                                postProcessAfterInitialization();
                           5.注册bean的销毁方法:registerDisposableBeanIfNecessary(beanName, bean, mbd);
                     5.将创建的bean添加到缓存中singleonObjects
                     ioc容器及时这么Map:很多map里面保存了单实例bean,环境信息.....
        所有bean都利用getBean创建完成以后:
             检查所有的bean是否是SmartInitializingSingleton接口的:如果是就执行afterSingletonsInstantiated();

12.finishRefresh();完成beanfactory的初始化创建工作:ioc容器就创建完成
    1.initLifecycleProcessor();初始化和生命周期有关的后置处理器:lifecycleProcessor
      默认从容器中找时候有lifecycleProcessor的组件[lifecycleProcessor],如果没有new DefaultLifecycleProcessor();
      加入到容器:
      写一个lifecycleProcessor的实现类,可以在beanfactory
                void onRefresh();
                void onClose();
    2.getLifecycleProcessor().onRefresh();
      拿到前面定义的生命周期处理器(beanfactory):回调

    3.publishEvent(new ContextRefreshedEvent(this));发布容器刷新完成事件
    4.	LiveBeansView.registerApplicationContext(this);






